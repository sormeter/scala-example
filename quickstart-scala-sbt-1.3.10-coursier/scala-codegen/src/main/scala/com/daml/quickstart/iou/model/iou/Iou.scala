/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.daml.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.daml.ledger.api.v1.{value=>$u0020rpcvalue}
package com.daml.quickstart.iou.model {
  package Iou {
    final case class Iou(issuer: ` lfdomainapi`.Primitive.Party, owner: ` lfdomainapi`.Primitive.Party, currency: ` lfdomainapi`.Primitive.Text, amount: ` lfdomainapi`.Primitive.Numeric, observers: ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]) extends ` lfdomainapi`.Template[Iou] {
      override protected[this] def templateCompanion(implicit ` d` : _root_.scala.Predef.DummyImplicit) = Iou
    }

    object Iou extends ` lfdomainapi`.TemplateCompanion[Iou] with _root_.scala.Function5[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Numeric, ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party], _root_.com.daml.quickstart.iou.model.Iou.Iou] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val issuer: ` C`[` lfdomainapi`.Primitive.Party];
        val owner: ` C`[` lfdomainapi`.Primitive.Party];
        val currency: ` C`[` lfdomainapi`.Primitive.Text];
        val amount: ` C`[` lfdomainapi`.Primitive.Numeric];
        val observers: ` C`[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val issuer = ` f`(` view`.issuer);
            override val owner = ` f`(` view`.owner);
            override val currency = ` f`(` view`.currency);
            override val amount = ` f`(` view`.amount);
            override val observers = ` f`(` view`.observers)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.Iou, moduleName = "Iou", entityName = "Iou");
      final implicit class `Iou syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseIou_AddObserver(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.Iou.Iou_AddObserver)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]] = ` exercise`(id, "Iou_AddObserver", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseIou_AddObserver(actor: ` lfdomainapi`.Primitive.Party, newObserver: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]] = exerciseIou_AddObserver(actor, _root_.com.daml.quickstart.iou.model.Iou.Iou_AddObserver(newObserver));
        def exerciseIou_Split(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.Iou.Iou_Split)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[com.daml.quickstart.iou.model.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou], ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]]] = ` exercise`(id, "Iou_Split", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseIou_Split(actor: ` lfdomainapi`.Primitive.Party, splitAmount: ` lfdomainapi`.Primitive.Numeric)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[com.daml.quickstart.iou.model.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou], ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]]] = exerciseIou_Split(actor, _root_.com.daml.quickstart.iou.model.Iou.Iou_Split(splitAmount));
        def exerciseIou_RemoveObserver(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.Iou.Iou_RemoveObserver)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]] = ` exercise`(id, "Iou_RemoveObserver", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseIou_RemoveObserver(actor: ` lfdomainapi`.Primitive.Party, oldObserver: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]] = exerciseIou_RemoveObserver(actor, _root_.com.daml.quickstart.iou.model.Iou.Iou_RemoveObserver(oldObserver));
        def exerciseIou_Transfer(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.Iou.Iou_Transfer)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.IouTransfer]] = ` exercise`(id, "Iou_Transfer", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseIou_Transfer(actor: ` lfdomainapi`.Primitive.Party, newOwner: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.IouTransfer]] = exerciseIou_Transfer(actor, _root_.com.daml.quickstart.iou.model.Iou.Iou_Transfer(newOwner));
        def exerciseIou_Merge(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.Iou.Iou_Merge)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]] = ` exercise`(id, "Iou_Merge", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseIou_Merge(actor: ` lfdomainapi`.Primitive.Party, otherCid: ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou])(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]] = exerciseIou_Merge(actor, _root_.com.daml.quickstart.iou.model.Iou.Iou_Merge(otherCid));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Iou]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.daml.quickstart.iou.model.DA.Internal.Template.Archive())
      };
      override val consumingChoices: Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(Set("Iou_AddObserver", "Iou_Split", "Iou_RemoveObserver", "Iou_Transfer", "Iou_Merge", "Archive"));
      override def toNamedArguments(` self` : Iou) = ` arguments`(scala.Tuple2("issuer", ` lfdomainapi`.Value.encode(` self`.issuer)), scala.Tuple2("owner", ` lfdomainapi`.Value.encode(` self`.owner)), scala.Tuple2("currency", ` lfdomainapi`.Value.encode(` self`.currency)), scala.Tuple2("amount", ` lfdomainapi`.Value.encode(` self`.amount)), scala.Tuple2("observers", ` lfdomainapi`.Value.encode(` self`.observers)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(5))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "issuer"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "owner"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "currency"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv2) match {
                    case _root_.scala.Some(z2) => (` r`.fields(3) match {
                      case ` rpcvalue`.RecordField((""| "amount"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Numeric](zv3) match {
                        case _root_.scala.Some(z3) => (` r`.fields(4) match {
                          case ` rpcvalue`.RecordField((""| "observers"), _root_.scala.Some(zv4)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]](zv4) match {
                            case _root_.scala.Some(z4) => Some(Iou(z0, z1, z2, z3, z4))
                            case _root_.scala.None => _root_.scala.None
                          })
                          case _ => _root_.scala.None
                        })
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val issuer = lte.field("issuer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val owner = lte.field("owner", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val currency = lte.field("currency", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
          val amount = lte.field("amount", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Numeric](lte));
          val observers = lte.field("observers", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.Party]](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.daml.quickstart.iou.model.Iou.Iou] = {
        val `recordFields `: lte.RecordFields[_root_.com.daml.quickstart.iou.model.Iou.Iou] = lte.RecordFields.xmapN(lte.fields(`view `.issuer), lte.fields(`view `.owner), lte.fields(`view `.currency), lte.fields(`view `.amount), lte.fields(`view `.observers))({
          case scala.Tuple5(issuer, owner, currency, amount, observers) => _root_.com.daml.quickstart.iou.model.Iou.Iou(issuer, owner, currency, amount, observers)
        })({
          case _root_.com.daml.quickstart.iou.model.Iou.Iou(issuer, owner, currency, amount, observers) => scala.Tuple5(issuer, owner, currency, amount, observers)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
