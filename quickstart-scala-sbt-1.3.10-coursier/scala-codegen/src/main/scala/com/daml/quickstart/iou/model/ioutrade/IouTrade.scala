/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.daml.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.daml.ledger.api.v1.{value=>$u0020rpcvalue}
package com.daml.quickstart.iou.model {
  package IouTrade {
    final case class IouTrade(buyer: ` lfdomainapi`.Primitive.Party, seller: ` lfdomainapi`.Primitive.Party, baseIouCid: ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou], baseIssuer: ` lfdomainapi`.Primitive.Party, baseCurrency: ` lfdomainapi`.Primitive.Text, baseAmount: ` lfdomainapi`.Primitive.Numeric, quoteIssuer: ` lfdomainapi`.Primitive.Party, quoteCurrency: ` lfdomainapi`.Primitive.Text, quoteAmount: ` lfdomainapi`.Primitive.Numeric) extends ` lfdomainapi`.Template[IouTrade] {
      override protected[this] def templateCompanion(implicit ` d` : _root_.scala.Predef.DummyImplicit) = IouTrade
    }

    object IouTrade extends ` lfdomainapi`.TemplateCompanion[IouTrade] with _root_.scala.Function9[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou], ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Numeric, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Numeric, _root_.com.daml.quickstart.iou.model.IouTrade.IouTrade] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val buyer: ` C`[` lfdomainapi`.Primitive.Party];
        val seller: ` C`[` lfdomainapi`.Primitive.Party];
        val baseIouCid: ` C`[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]];
        val baseIssuer: ` C`[` lfdomainapi`.Primitive.Party];
        val baseCurrency: ` C`[` lfdomainapi`.Primitive.Text];
        val baseAmount: ` C`[` lfdomainapi`.Primitive.Numeric];
        val quoteIssuer: ` C`[` lfdomainapi`.Primitive.Party];
        val quoteCurrency: ` C`[` lfdomainapi`.Primitive.Text];
        val quoteAmount: ` C`[` lfdomainapi`.Primitive.Numeric];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val buyer = ` f`(` view`.buyer);
            override val seller = ` f`(` view`.seller);
            override val baseIouCid = ` f`(` view`.baseIouCid);
            override val baseIssuer = ` f`(` view`.baseIssuer);
            override val baseCurrency = ` f`(` view`.baseCurrency);
            override val baseAmount = ` f`(` view`.baseAmount);
            override val quoteIssuer = ` f`(` view`.quoteIssuer);
            override val quoteCurrency = ` f`(` view`.quoteCurrency);
            override val quoteAmount = ` f`(` view`.quoteAmount)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.IouTrade, moduleName = "IouTrade", entityName = "IouTrade");
      final implicit class `IouTrade syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseIouTrade_Accept(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.IouTrade.IouTrade_Accept)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, IouTrade]): ` lfdomainapi`.Primitive.Update[com.daml.quickstart.iou.model.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou], ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]]] = ` exercise`(id, "IouTrade_Accept", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseIouTrade_Accept(actor: ` lfdomainapi`.Primitive.Party, quoteIouCid: ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou])(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, IouTrade]): ` lfdomainapi`.Primitive.Update[com.daml.quickstart.iou.model.DA.Types.Tuple2[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou], ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]]] = exerciseIouTrade_Accept(actor, _root_.com.daml.quickstart.iou.model.IouTrade.IouTrade_Accept(quoteIouCid));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, IouTrade]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, IouTrade]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.daml.quickstart.iou.model.DA.Internal.Template.Archive());
        def exerciseTradeProposal_Reject(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.IouTrade.TradeProposal_Reject)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, IouTrade]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "TradeProposal_Reject", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseTradeProposal_Reject(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, IouTrade]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseTradeProposal_Reject(actor, _root_.com.daml.quickstart.iou.model.IouTrade.TradeProposal_Reject())
      };
      override val consumingChoices: Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(Set("IouTrade_Accept", "Archive", "TradeProposal_Reject"));
      override def toNamedArguments(` self` : IouTrade) = ` arguments`(scala.Tuple2("buyer", ` lfdomainapi`.Value.encode(` self`.buyer)), scala.Tuple2("seller", ` lfdomainapi`.Value.encode(` self`.seller)), scala.Tuple2("baseIouCid", ` lfdomainapi`.Value.encode(` self`.baseIouCid)), scala.Tuple2("baseIssuer", ` lfdomainapi`.Value.encode(` self`.baseIssuer)), scala.Tuple2("baseCurrency", ` lfdomainapi`.Value.encode(` self`.baseCurrency)), scala.Tuple2("baseAmount", ` lfdomainapi`.Value.encode(` self`.baseAmount)), scala.Tuple2("quoteIssuer", ` lfdomainapi`.Value.encode(` self`.quoteIssuer)), scala.Tuple2("quoteCurrency", ` lfdomainapi`.Value.encode(` self`.quoteCurrency)), scala.Tuple2("quoteAmount", ` lfdomainapi`.Value.encode(` self`.quoteAmount)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(9))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "buyer"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "seller"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "baseIouCid"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]](zv2) match {
                    case _root_.scala.Some(z2) => (` r`.fields(3) match {
                      case ` rpcvalue`.RecordField((""| "baseIssuer"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv3) match {
                        case _root_.scala.Some(z3) => (` r`.fields(4) match {
                          case ` rpcvalue`.RecordField((""| "baseCurrency"), _root_.scala.Some(zv4)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv4) match {
                            case _root_.scala.Some(z4) => (` r`.fields(5) match {
                              case ` rpcvalue`.RecordField((""| "baseAmount"), _root_.scala.Some(zv5)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Numeric](zv5) match {
                                case _root_.scala.Some(z5) => (` r`.fields(6) match {
                                  case ` rpcvalue`.RecordField((""| "quoteIssuer"), _root_.scala.Some(zv6)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv6) match {
                                    case _root_.scala.Some(z6) => (` r`.fields(7) match {
                                      case ` rpcvalue`.RecordField((""| "quoteCurrency"), _root_.scala.Some(zv7)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv7) match {
                                        case _root_.scala.Some(z7) => (` r`.fields(8) match {
                                          case ` rpcvalue`.RecordField((""| "quoteAmount"), _root_.scala.Some(zv8)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Numeric](zv8) match {
                                            case _root_.scala.Some(z8) => Some(IouTrade(z0, z1, z2, z3, z4, z5, z6, z7, z8))
                                            case _root_.scala.None => _root_.scala.None
                                          })
                                          case _ => _root_.scala.None
                                        })
                                        case _root_.scala.None => _root_.scala.None
                                      })
                                      case _ => _root_.scala.None
                                    })
                                    case _root_.scala.None => _root_.scala.None
                                  })
                                  case _ => _root_.scala.None
                                })
                                case _root_.scala.None => _root_.scala.None
                              })
                              case _ => _root_.scala.None
                            })
                            case _root_.scala.None => _root_.scala.None
                          })
                          case _ => _root_.scala.None
                        })
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val buyer = lte.field("buyer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val seller = lte.field("seller", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val baseIouCid = lte.field("baseIouCid", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.Iou.Iou]](lte));
          val baseIssuer = lte.field("baseIssuer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val baseCurrency = lte.field("baseCurrency", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
          val baseAmount = lte.field("baseAmount", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Numeric](lte));
          val quoteIssuer = lte.field("quoteIssuer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val quoteCurrency = lte.field("quoteCurrency", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
          val quoteAmount = lte.field("quoteAmount", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Numeric](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.daml.quickstart.iou.model.IouTrade.IouTrade] = {
        val `recordFields `: lte.RecordFields[_root_.com.daml.quickstart.iou.model.IouTrade.IouTrade] = lte.RecordFields.xmapN(lte.fields(`view `.buyer), lte.fields(`view `.seller), lte.fields(`view `.baseIouCid), lte.fields(`view `.baseIssuer), lte.RecordFields.tupleN(lte.fields(`view `.baseCurrency), lte.fields(`view `.baseAmount), lte.fields(`view `.quoteIssuer), lte.fields(`view `.quoteCurrency), lte.fields(`view `.quoteAmount)))({
          case scala.Tuple5(buyer, seller, baseIouCid, baseIssuer, scala.Tuple5(baseCurrency, baseAmount, quoteIssuer, quoteCurrency, quoteAmount)) => _root_.com.daml.quickstart.iou.model.IouTrade.IouTrade(buyer, seller, baseIouCid, baseIssuer, baseCurrency, baseAmount, quoteIssuer, quoteCurrency, quoteAmount)
        })({
          case _root_.com.daml.quickstart.iou.model.IouTrade.IouTrade(buyer, seller, baseIouCid, baseIssuer, baseCurrency, baseAmount, quoteIssuer, quoteCurrency, quoteAmount) => scala.Tuple5(buyer, seller, baseIouCid, baseIssuer, scala.Tuple5(baseCurrency, baseAmount, quoteIssuer, quoteCurrency, quoteAmount))
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
